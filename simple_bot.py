import logging
import requests
import json
import time
import threading
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "7808830885:AAHFkGTaOylnQ99RrNolU5UgjEgo2gxFrqo"
WEB_SERVER_URL = "http://127.0.0.1:5000"
ADMIN_CHAT_ID = "2063086506"

class SimpleOrderBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.last_orders = set()
        self.monitoring = True
        self.setup_handlers()
        logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("orders", self.orders_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CallbackQueryHandler(self.button_handler))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        message = """
ü§ñ <b>–°–∏—Å—Ç–µ–º–∞ –∑–∞–∫–∞–∑–æ–≤ –≥–æ—Ç–æ–≤–∞!</b>

‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã
‚úÖ –°–∞–π—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç: http://127.0.0.1:5000

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/orders - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã
/help - –ü–æ–º–æ—â—å

–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç—É–ø–∏—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.
        """
        await update.message.reply_text(message, parse_mode='HTML')
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        message = """
üìñ <b>–ü–æ–º–æ—â—å –ø–æ —Å–∏—Å—Ç–µ–º–µ –∑–∞–∫–∞–∑–æ–≤</b>

<b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º:</b>
‚Ä¢ –ü—Ä–∏ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ ‚úÖ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ ‚ùå "–û—Ç–∫–ª–æ–Ω–∏—Ç—å" –¥–ª—è –æ—Ç–∫–∞–∑–∞
‚Ä¢ –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –∫–æ–¥

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/orders - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üåê –°–∞–π—Ç: http://127.0.0.1:5000
        """
        await update.message.reply_text(message, parse_mode='HTML')
    
    async def orders_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã"""
        try:
            response = requests.get(f"{WEB_SERVER_URL}/api/bot/orders", timeout=5)
            if response.status_code == 200:
                orders = response.json()
                
                if not orders:
                    await update.message.reply_text("üìã –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤")
                    return
                
                for order_id, order_data in orders.items():
                    await self.send_order_notification(update.effective_chat.id, order_id, order_data)
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {e}")
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã")
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        try:
            action, order_id = query.data.split("_", 1)
            
            if action == "approve":
                await self.approve_order(query, order_id)
            elif action == "reject":
                await self.reject_order(query, order_id)
            elif action == "confirm":
                await self.confirm_code(query, order_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è")
    
    async def approve_order(self, query, order_id):
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑"""
        try:
            response = requests.post(f"{WEB_SERVER_URL}/api/bot/approve/{order_id}", timeout=5)
            
            if response.status_code == 200:
                message = f"""
‚úÖ <b>–ó–ê–ö–ê–ó –û–î–û–ë–†–ï–ù!</b>

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π –∫–æ–¥ –Ω–∞ —Å–∞–π—Ç–µ.
–û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

üåê –°–∞–π—Ç: {WEB_SERVER_URL}
                """
                
                await query.edit_message_text(message, parse_mode='HTML')
                logger.info(f"–ó–∞–∫–∞–∑ {order_id} –æ–¥–æ–±—Ä–µ–Ω")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è: {e}")
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞–∫–∞–∑")
    
    async def reject_order(self, query, order_id):
        """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"""
        try:
            response = requests.post(f"{WEB_SERVER_URL}/api/bot/reject/{order_id}", timeout=5)
            
            if response.status_code == 200:
                await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.")
                logger.info(f"–ó–∞–∫–∞–∑ {order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {e}")
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")
    
    async def confirm_code(self, query, order_id):
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            response = requests.post(f"{WEB_SERVER_URL}/api/bot/confirm_code/{order_id}", timeout=5)
            
            if response.status_code == 200:
                message = "‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω."
                await query.edit_message_text(message)
                logger.info(f"–ö–æ–¥ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–¥–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–¥–∞: {e}")
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–¥")
    
    async def send_order_notification(self, chat_id, order_id, order_data):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ"""
        try:
            data = order_data['data']
            status = order_data.get('status', 'pending')
            created_time = datetime.fromisoformat(order_data['created_at']).strftime('%d.%m.%Y %H:%M')
            
            if status == 'code_submitted':
                user_code = order_data.get('user_code', '?')
                message = f"""
üîë <b>–ö–û–î –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø!</b>

üë§ <b>–ò–º—è:</b> {data['name']}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data['phone']}
üìß <b>Email:</b> {data['email']}

üîë <b>–ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <code>{user_code}</code>

üÜî <b>ID –∑–∞–∫–∞–∑–∞:</b> {order_id[:8]}...

<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–¥?</b>
                """
                keyboard = [
                    [
                        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–¥", callback_data=f"confirm_{order_id}"),
                        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{order_id}")
                    ]
                ]
            else:
                message = f"""
üîî <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó!</b>

üë§ <b>–ò–º—è:</b> {data['name']}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data['phone']}
üìß <b>Email:</b> {data['email']}
üõç <b>–£—Å–ª—É–≥–∞:</b> {data['service']}
üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {data.get('message', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

üìÖ <b>–í—Ä–µ–º—è:</b> {created_time}
üÜî <b>ID:</b> {order_id[:8]}...

<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>
                """
                keyboard = [
                    [
                        InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{order_id}"),
                        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{order_id}")
                    ]
                ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await self.application.bot.send_message(
                chat_id=chat_id,
                text=message,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def monitor_orders(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–∫–∞–∑–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        logger.info("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–∫–∞–∑–æ–≤")
        
        while self.monitoring:
            try:
                response = requests.get(f"{WEB_SERVER_URL}/api/bot/orders", timeout=5)
                if response.status_code == 200:
                    current_orders = response.json()
                    current_order_ids = set(current_orders.keys())
                    
                    # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
                    new_orders = current_order_ids - self.last_orders
                    
                    if new_orders and ADMIN_CHAT_ID:
                        for order_id in new_orders:
                            try:
                                order_data = current_orders[order_id]
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ requests API
                                self.send_telegram_notification(order_id, order_data)
                                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ {order_id}")
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {order_id}: {e}")
                    
                    self.last_orders = current_order_ids
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            
            time.sleep(2)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    
    def send_telegram_notification(self, order_id, order_data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ API"""
        try:
            data = order_data['data']
            status = order_data.get('status', 'pending')
            created_time = datetime.fromisoformat(order_data['created_at']).strftime('%d.%m.%Y %H:%M')
            
            if status == 'code_submitted':
                user_code = order_data.get('user_code', '?')
                message = f"""üîë <b>–ö–û–î –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø!</b>

üë§ <b>–ò–º—è:</b> {data['name']}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data['phone']}
üìß <b>Email:</b> {data['email']}

üîë <b>–ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <code>{user_code}</code>

üÜî <b>ID –∑–∞–∫–∞–∑–∞:</b> {order_id[:8]}...

<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–¥?</b>"""
                keyboard = {
                    "inline_keyboard": [
                        [
                            {"text": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–¥", "callback_data": f"confirm_{order_id}"},
                            {"text": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", "callback_data": f"reject_{order_id}"}
                        ]
                    ]
                }
            else:
                message = f"""üîî <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó!</b>

üë§ <b>–ò–º—è:</b> {data['name']}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data['phone']}
üìß <b>Email:</b> {data['email']}
üõç <b>–£—Å–ª—É–≥–∞:</b> {data['service']}
üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {data.get('message', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

üìÖ <b>–í—Ä–µ–º—è:</b> {created_time}
üÜî <b>ID:</b> {order_id[:8]}...

<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"""
                keyboard = {
                    "inline_keyboard": [
                        [
                            {"text": "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", "callback_data": f"approve_{order_id}"},
                            {"text": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", "callback_data": f"reject_{order_id}"}
                        ]
                    ]
                }
            
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
            payload = {
                'chat_id': ADMIN_CHAT_ID,
                'text': message,
                'parse_mode': 'HTML',
                'reply_markup': keyboard
            }
            
            response = requests.post(url, json=payload, timeout=10)
            return response.status_code == 200
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ API: {e}")
            return False
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("ü§ñ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞...")
        print(f"üì° –°–µ—Ä–≤–µ—Ä: {WEB_SERVER_URL}")
        print(f"üë§ Admin ID: {ADMIN_CHAT_ID}")
        print("üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã")
        print("‚ö†Ô∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C")
        print()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        monitor_thread = threading.Thread(target=self.monitor_orders, daemon=True)
        monitor_thread.start()
        
        try:
            self.application.run_polling(drop_pending_updates=True)
        except KeyboardInterrupt:
            print("\nüëã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
            self.monitoring = False

def main():
    bot = SimpleOrderBot()
    bot.run()

if __name__ == "__main__":
    main()