import logging
import requests
import json
import os
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE')  # –ü–æ–ª—É—á–∏—Ç–µ –æ—Ç @BotFather
WEB_SERVER_URL = os.environ.get('WEB_SERVER_URL', 'http://127.0.0.1:5000')  # URL –≤–∞—à–µ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
ADMIN_CHAT_ID = os.environ.get('ADMIN_CHAT_ID', 'YOUR_CHAT_ID_HERE')  # –í–∞—à chat_id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

class OrderBot:
    def __init__(self, token, web_server_url):
        self.token = token
        self.web_server_url = web_server_url
        self.application = Application.builder().token(token).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ callback'–æ–≤"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("orders", self.orders_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CallbackQueryHandler(self.button_handler))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        welcome_message = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏!

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/orders - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
/help - –ü–æ–º–æ—â—å

–≠—Ç–æ—Ç –±–æ—Ç –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö —Å —Å–∞–π—Ç–∞.
        """
        await update.message.reply_text(welcome_message)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
üìù –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

üî∏ /start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
üî∏ /orders - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã
üî∏ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
- –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ñ–æ—Ä–º–ª—è–µ—Ç –∑–∞–∫–∞–∑ –Ω–∞ —Å–∞–π—Ç–µ, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
- –ù–∞–∂–º–∏—Ç–µ ‚úÖ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" —á—Ç–æ–±—ã –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞–∫–∞–∑
- –ù–∞–∂–º–∏—Ç–µ ‚ùå "–û—Ç–∫–ª–æ–Ω–∏—Ç—å" —á—Ç–æ–±—ã –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
- –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –∫–æ–¥ –¥–ª—è –≤–≤–æ–¥–∞
        """
        await update.message.reply_text(help_text)
    
    async def orders_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /orders - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã"""
        try:
            response = requests.get(f"{self.web_server_url}/api/bot/orders")
            if response.status_code == 200:
                orders = response.json()
                
                if not orders:
                    await update.message.reply_text("üìã –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤")
                    return
                
                for order_id, order_data in orders.items():
                    await self.send_order_notification(update.effective_chat.id, order_id, order_data)
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤")
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        action, order_id = query.data.split("_", 1)
        
        if action == "approve":
            await self.approve_order(query, order_id)
        elif action == "reject":
            await self.reject_order(query, order_id)
        elif action == "details":
            await self.show_order_details(query, order_id)
    
    async def approve_order(self, query, order_id):
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑"""
        try:
            response = requests.post(f"{self.web_server_url}/api/bot/approve/{order_id}")
            
            if response.status_code == 200:
                data = response.json()
                confirmation_code = data.get('confirmation_code')
                
                success_message = f"""
‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!

üîë –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: `{confirmation_code}`

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.
–¢–µ–ø–µ—Ä—å –æ–Ω –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ.
                """
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await query.edit_message_text(
                    text=success_message,
                    parse_mode='Markdown'
                )
                
                logger.info(f"–ó–∞–∫–∞–∑ {order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
    
    async def reject_order(self, query, order_id):
        """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"""
        try:
            response = requests.post(f"{self.web_server_url}/api/bot/reject/{order_id}")
            
            if response.status_code == 200:
                await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")
                logger.info(f"–ó–∞–∫–∞–∑ {order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
    
    async def show_order_details(self, query, order_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞"""
        try:
            response = requests.get(f"{self.web_server_url}/api/bot/order/{order_id}")
            
            if response.status_code == 200:
                order = response.json()
                order_data = order['data']
                
                details_message = f"""
üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:

üë§ –ò–º—è: {order_data['name']}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order_data['phone']}
üìß Email: {order_data['email']}
üõç –£—Å–ª—É–≥–∞: {order_data['service']}
üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {order_data.get('message', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

üìÖ –°–æ–∑–¥–∞–Ω: {order['created_at']}
üîÑ –°—Ç–∞—Ç—É—Å: {order['status']}
                """
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                keyboard = [
                    [
                        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{order_id}"),
                        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{order_id}")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    text=details_message,
                    reply_markup=reply_markup
                )
            else:
                await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞")
    
    async def send_order_notification(self, chat_id, order_id, order_data):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
        try:
            data = order_data['data']
            created_time = datetime.fromisoformat(order_data['created_at']).strftime('%d.%m.%Y %H:%M')
            
            message = f"""
üîî –ù–û–í–´–ô –ó–ê–ö–ê–ó!

üë§ –ò–º—è: {data['name']}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}
üìß Email: {data['email']}
üõç –£—Å–ª—É–≥–∞: {data['service']}
üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {data.get('message', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

üìÖ –í—Ä–µ–º—è: {created_time}
üÜî ID: {order_id[:8]}...

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
            """
            
            # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{order_id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{order_id}")
                ],
                [
                    InlineKeyboardButton("üìã –î–µ—Ç–∞–ª–∏", callback_data=f"details_{order_id}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await self.application.bot.send_message(
                chat_id=chat_id,
                text=message,
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    async def notify_new_order(self, order_id, order_data):
        """–£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
        if ADMIN_CHAT_ID and ADMIN_CHAT_ID != "YOUR_CHAT_ID_HERE":
            await self.send_order_notification(ADMIN_CHAT_ID, order_id, order_data)
    
    async def run_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        await self.application.run_polling()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...")
        
        if self.token == "YOUR_BOT_TOKEN_HERE":
            logger.error("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω BOT_TOKEN! –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather")
            return
        
        if ADMIN_CHAT_ID == "YOUR_CHAT_ID_HERE":
            logger.warning("‚ö†Ô∏è –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ADMIN_CHAT_ID. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
        
        # –ó–∞–ø—É—Å–∫ polling
        self.application.run_polling()

# –ö–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
class OrderMonitor:
    def __init__(self, bot, web_server_url):
        self.bot = bot
        self.web_server_url = web_server_url
        self.last_check_orders = set()
    
    async def monitor_orders(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
        while True:
            try:
                response = requests.get(f"{self.web_server_url}/api/bot/orders", timeout=5)
                if response.status_code == 200:
                    current_orders = response.json()
                    current_order_ids = set(current_orders.keys())
                    
                    # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
                    new_orders = current_order_ids - self.last_check_orders
                    
                    for order_id in new_orders:
                        order_data = current_orders[order_id]
                        await self.bot.notify_new_order(order_id, order_data)
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ {order_id}")
                    
                    self.last_check_orders = current_order_ids
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–∫–∞–∑–æ–≤: {e}")
            
            await asyncio.sleep(3)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω BOT_TOKEN!")
        print("1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather")
        print("2. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω")
        print("3. –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN_HERE' –≤ —Ñ–∞–π–ª–µ telegram_bot.py")
        return
    
    if ADMIN_CHAT_ID == "YOUR_CHAT_ID_HERE":
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ADMIN_CHAT_ID!")
        print("1. –ù–∞–π–¥–∏—Ç–µ —Å–≤–æ–µ–≥–æ chat_id —á–µ—Ä–µ–∑ @userinfobot")
        print("2. –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_CHAT_ID_HERE' –≤ —Ñ–∞–π–ª–µ telegram_bot.py")
        print("3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        print()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot = OrderBot(BOT_TOKEN, WEB_SERVER_URL)
    
    print("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É: {WEB_SERVER_URL}")
    print("üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("   /start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")
    print("   /orders - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã")
    print("   /help - –ü–æ–º–æ—â—å")
    print()
    print("üîÑ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    try:
        bot.run()
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()